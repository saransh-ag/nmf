Java implementation
Hello,
As I need NMF in my Java text processing application I ported the following Matlab code:


function [U, V] = nmf4(A)

[m, n] = size(A);

r=2; maxiter=3;

U = rand(m, r);

V = rand(n, r);

eps = 1e-9;

for iter = 1:maxiter

W = W.*((V*H'+eps)./(W*H*H'+eps));

H = (H'.*((V'*W+eps)./(H'*W'*W+eps)))';

end

(updating rules taken from http://citeseer.nj.nec.com/lee01algorithms.html) to the following fragment of Java code (JAMA matrix computation package used):


k = 2;

maxIterations = 3;

int m = A.getRowDimension();

int n = A.getColumnDimension();

U = Matrix.random(m, k);

V = Matrix.random(n, k);

Matrix T, UT1, UT2, VT1, VT2;

Matrix epsU = new Matrix(m, k, eps);

Matrix epsV = new Matrix(n, k, eps);

// Updating

for(int i = 0; i < maxIterations; i++)

{

// U

T = V.transpose().times(V);

UT1 = A.times(V);

UT2 = U.times(T);

UT1.plusEquals(epsU);

UT2.plusEquals(epsU);

UT1.arrayRightDivideEquals(UT2);

U.arrayTimesEquals(UT1);

// V

T = U.transpose().times(U);

VT1 = A.transpose().times(U);

VT2 = V.times(T);

VT1.plusEquals(epsV);

VT2.plusEquals(epsV);

VT1.arrayRightDivideEquals(VT2);

V.arrayTimesEquals(VT1);

}

The problem is that the Java version seems to be far less accurate than the Matlab one. I carried out a simple experiment: for all-ones starting U and V matrices (rand(m, k) replaced by ones(m, k)), and a 5x7 A matrix, I tried to compare the Matlab and Java results iteration by iteration. It turned out that just after the second iteration Matlab's and Java's U matrices very much differ.
This suggests that probably there is no bug in the ported Java version but rather a problem in accuracy and stability of JAMA's matrix computations. Can it be that the JAMA's simple matrix multiplication algorithm is at fault here?
Thanks!
PS. I can provide full Java code if necessary.
-- Stanislaw Osinski

    I have subscribed to the JAMA mailing list since last year (2003). The question you raised , have been asked at the JAMA mailing list previously. Cleve Moler from MathWorks who participated in developing JAMA (with people from NIST), explain that there is no inaccuracy in JAMA at all. So , I would take it from the father of MATLAB that what he said about JAMA is correct. I will be implementing a Java version of NMF using JAMA too.

    Cheers, Sione.

        Yes - that was my mistake. I had a subtle bug in my code, but it works fine now.
        I the meantime I switched from JAMA to Colt, which gave some modest speedup. And for the best performance check this out:
        http://www.math.uib.no/~bjornoh/mtj/
        I wrote a simple adapter for Colt (a matrix class compatibile with Colt, which uses native ATLAS matrix routines through NNI), which can give up to 5x speedup on my machine.
        If you want to have a look at my implementations in Colt, let me know or go to:
        http://cvs.sourceforge.net/viewcvs.py/carrot2/carrot2/components/carrot2-util-matrix/
        -- Stan 

